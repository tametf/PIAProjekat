package beans;
// Generated Jun 2, 2020, 10:56:56 PM by Hibernate Tools 4.3.1


import controllers.RasadnikController;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import util.HibernateUtil;

/**
 * Narudzbine generated by hbm2java
 */
public class Narudzbine  implements java.io.Serializable {


     private int idNarudzbine;
     private Rasadnik rasadnik;
     private Date datum;
     private Set<Stavka> stavkas = new HashSet<Stavka>(0);
     private String nazivProizvoda;
     private String tipProizvoda;
     private String preduzece;
     private String status;
     private int brojNarucenih;

    public Narudzbine() {
    }

	
    public Narudzbine(int idNarudzbine, Rasadnik rasadnik) {
        this.idNarudzbine = idNarudzbine;
        this.rasadnik = rasadnik;
    }
    public Narudzbine(int idNarudzbine, Rasadnik rasadnik, Date datum, Set<Stavka> stavkas) {
       this.idNarudzbine = idNarudzbine;
       this.rasadnik = rasadnik;
       this.datum = datum;
       this.stavkas = stavkas;
    }
   
    public int getIdNarudzbine() {
        return this.idNarudzbine;
    }
    
    public void setIdNarudzbine(int idNarudzbine) {
        this.idNarudzbine = idNarudzbine;
    }
    public Rasadnik getRasadnik() {
        return this.rasadnik;
    }
    
    public void setRasadnik(Rasadnik rasadnik) {
        this.rasadnik = rasadnik;
    }
    public Date getDatum() {
        return this.datum;
    }
    
    public void setDatum(Date datum) {
        this.datum = datum;
    }
    public Set<Stavka> getStavkas() {
        return this.stavkas;
    }
    
    public void setStavkas(Set<Stavka> stavkas) {
        this.stavkas = stavkas;
    }

    public String getNazivProizvoda() {
        return nazivProizvoda;
    }

    public void setNazivProizvoda(String nazivProizvoda) {
        this.nazivProizvoda = nazivProizvoda;
    }

    public String getTipProizvoda() {
        return tipProizvoda;
    }

    public void setTipProizvoda(String tipProizvoda) {
        this.tipProizvoda = tipProizvoda;
    }

    public String getPreduzece() {
        return preduzece;
    }

    public void setPreduzece(String preduzece) {
        this.preduzece = preduzece;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public int getBrojNarucenih() {
        return brojNarucenih;
    }

    public void setBrojNarucenih(int brojNarucenih) {
        this.brojNarucenih = brojNarucenih;
    }
    

    public static List<Narudzbine> dohvatiNarudzbine(Rasadnik ras) {
        List<Narudzbine> narudzbine = new ArrayList<Narudzbine>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        narudzbine = session.createCriteria(Narudzbine.class).add(Restrictions.eq("rasadnik.idRasadnika", ras.getIdRasadnika())).list();
        session.getTransaction().commit();
        session.close();
        return narudzbine;
    
    }
    
    public static List<Narudzbine> dohvatiNarudzbineM(Rasadnik ras) {
        List<Narudzbine> narudzbine = new ArrayList<Narudzbine>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        narudzbine = session.createCriteria(Narudzbine.class).add(Restrictions.eq("rasadnik.idRasadnika", ras.getIdRasadnika())).add(Restrictions.eq("status", "na cekanju")).list();
        session.getTransaction().commit();
        session.close();
        return narudzbine;
    
    }

    public static void otkazi(Narudzbine n) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.delete(n);
        session.getTransaction().commit();
        session.close();
    }

    public static int dajId() {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        List<Narudzbine> nar = session.createCriteria(Narudzbine.class).list();
        session.getTransaction().commit();
        session.close();
        int id = 1;
        for(int i = 0; i < nar.size(); i++) {
            id = nar.get(i).getIdNarudzbine();
        }
        ++id;
        
        return id;
    }
    
    public static void naruci(Proizvod proizvod, int brojNarucenih) {
        Narudzbine n = new Narudzbine();
        n.setDatum(new Date());
        n.setIdNarudzbine(dajId());
        n.setNazivProizvoda(proizvod.getNazivProizvoda());
        n.setPreduzece(proizvod.getProizvodjac());
        n.setRasadnik(RasadnikController.getRastr());
        n.setTipProizvoda(proizvod.getTipProizvoda());
        n.setStatus("na cekanju");
        n.setBrojNarucenih(brojNarucenih);
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.save(n);
        session.getTransaction().commit();
        session.close();
    }
    
    public static List<Narudzbine> dohvatiNarudzbineZaPreduzece(String preduzece) {
        List<Narudzbine> narudzbine = new ArrayList<Narudzbine>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Criteria criteria = session.createCriteria(Narudzbine.class);
        criteria.setFetchMode("narudzbine", FetchMode.EAGER);
        narudzbine = criteria.add(Restrictions.eq("preduzece", preduzece)).add(Restrictions.eq("status", "na cekanju")).list();
        session.getTransaction().commit();
        session.close();
        List<Narudzbine> narudzbine2 = new ArrayList<Narudzbine>();
        SessionFactory sf2 = HibernateUtil.getSessionFactory();
        Session session2 = sf2.openSession();
        session2.beginTransaction();
        Criteria criteria2 = session2.createCriteria(Narudzbine.class);
        criteria2.setFetchMode("narudzbine", FetchMode.EAGER);
        narudzbine2 = criteria2.add(Restrictions.eq("preduzece", preduzece)).add(Restrictions.eq("status", "isporuka u toku")).list();
        session2.getTransaction().commit();
        session2.close();
        for(int i = 0; i < narudzbine2.size(); i++) {
            narudzbine.add(narudzbine2.get(i));
        }
        return narudzbine;
    }
    
  
    
    public static void azurirajNarudzbinu(Narudzbine n) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(n);
        session.getTransaction().commit();
        session.close();
    }
    
       public static void odbij(Narudzbine n) {
        n.setStatus("nije isporucena");
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(n);
        session.getTransaction().commit();
        session.close();
    }
       
       
       public static List<Narudzbine> dohvatiNarudzbineZaPreduzeceSve(Preduzece pr) {
           
        List<Narudzbine> narudzbine = new ArrayList<Narudzbine>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Criteria criteria = session.createCriteria(Narudzbine.class);
        criteria.setFetchMode("narudzbine", FetchMode.EAGER);
        narudzbine = criteria.add(Restrictions.eq("preduzece", pr.getKorisnickoImePred())).list();
        session.getTransaction().commit();
        session.close();
        return narudzbine;
       }
       
       
      
}


