package beans;
// Generated Jun 2, 2020, 10:56:56 PM by Hibernate Tools 4.3.1

import java.util.ArrayList;
import java.util.List;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import util.HibernateUtil;




/**
 * Korisnik generated by hbm2java
 */
public class Korisnik  implements java.io.Serializable {

 


     private String korisnickoIme;
     private String lozinka;
     private String tip;
     private int status;
     private Poljoprivrednik poljoprivrednik;
     private Preduzece preduzece;
     private boolean edit;

    public Korisnik() {
    }

	
    public Korisnik(String korisnickoIme, String lozinka, String tip, int status) {
        this.korisnickoIme = korisnickoIme;
        this.lozinka = lozinka;
        this.tip = tip;
        this.status = status;
    }
    public Korisnik(String korisnickoIme, String lozinka, String tip, int status, Poljoprivrednik poljoprivrednik, Preduzece preduzece) {
       this.korisnickoIme = korisnickoIme;
       this.lozinka = lozinka;
       this.tip = tip;
       this.status = status;
       this.poljoprivrednik = poljoprivrednik;
       this.preduzece = preduzece;
    }
   
    public String getKorisnickoIme() {
        return this.korisnickoIme;
    }
    
    public void setKorisnickoIme(String korisnickoIme) {
        this.korisnickoIme = korisnickoIme;
    }
    public String getLozinka() {
        return this.lozinka;
    }
    
    public void setLozinka(String lozinka) {
        this.lozinka = lozinka;
    }
    public String getTip() {
        return this.tip;
    }
    
    public void setTip(String tip) {
        this.tip = tip;
    }
    public int getStatus() {
        return this.status;
    }
    
    public void setStatus(int status) {
        this.status = status;
    }
    public Poljoprivrednik getPoljoprivrednik() {
        return this.poljoprivrednik;
    }
    
    public void setPoljoprivrednik(Poljoprivrednik poljoprivrednik) {
        this.poljoprivrednik = poljoprivrednik;
    }
    public Preduzece getPreduzece() {
        return this.preduzece;
    }
    
    public void setPreduzece(Preduzece preduzece) {
        this.preduzece = preduzece;
    }

    public boolean isEdit() {
        return edit;
    }

    public void setEdit(boolean edit) {
        this.edit = edit;
    }


public static Korisnik dohvatiKorisnika(String korisnickoIme, String lozinka) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();        
        Query q = session.createQuery("from Korisnik k where k.korisnickoIme='" + korisnickoIme + "'and k.lozinka = '" + lozinka + "'and k.status = '" + 1 + "'");
        Korisnik k = (Korisnik) q.uniqueResult();
        session.getTransaction().commit();
        session.close();
        
        
        return k;
    }
    
    
    public static Korisnik dohvatiKorisnikaPrekoKorisnickogImena(String korisnickoIme) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Criteria c = session.createCriteria(Korisnik.class);
        Korisnik korisnik = (Korisnik) c.add(Restrictions.eq("korisnickoIme", korisnickoIme)).uniqueResult();
        session.getTransaction().commit();
        session.close();
        return korisnik;
    }
    
    public static Poljoprivrednik dohvatiPoljoprivrednikaPrekoKorisnickogImena(String korisnickoIme) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Criteria c = session.createCriteria(Poljoprivrednik.class);
        Poljoprivrednik poljoprivrednik = (Poljoprivrednik) c.add(Restrictions.eq("korisnickoImePolj", korisnickoIme)).uniqueResult();
        session.getTransaction().commit();
        session.close();
        return poljoprivrednik;
    }
    
    
     public static Preduzece dohvatiPreduzecePrekoKorisnickogImena(String korisnickoIme) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Criteria c = session.createCriteria(Preduzece.class);
        Preduzece preduzece = (Preduzece) c.add(Restrictions.eq("korisnickoImePred", korisnickoIme)).uniqueResult();
        session.getTransaction().commit();
        session.close();
        return preduzece;
    }
    
    public static void sacuvajKorisnika(Korisnik k) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.save(k);
        session.getTransaction().commit();
        session.close();
    }
    
    
    public static List<Korisnik> dohvatiKorisnike() {
        List<Korisnik> korisnici = new ArrayList<Korisnik>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        korisnici = session.createCriteria(Korisnik.class).add(Restrictions.eq("status", 0)).list();
        session.getTransaction().commit();
        session.close();
        return korisnici;
    }
    
    
    public static void prihvatiKorisnika(Korisnik k) {
        k.setStatus(1);
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(k);
    //    session.save(k);
        session.getTransaction().commit();
        session.close();
    }
    
    public static void odbijKorisnika(Korisnik k) {
        if(k.getTip().equals("poljoprivrednik")) {
            Poljoprivrednik pp = dohvatiPoljoprivrednikaPrekoKorisnickogImena(k.korisnickoIme);
            if(pp!=null) obrisiPoljoprivrednika(pp);
        }
        if(k.getTip().equals("preduzetnik")) {
            Preduzece pred = dohvatiPreduzecePrekoKorisnickogImena(k.korisnickoIme);
           if(pred!=null) obrisiPreduzece(pred);
        }
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.delete(k);
        session.getTransaction().commit();
        session.close();
    }
    
    public static void obrisiKorisnika(Korisnik k) {
        if(k.getTip().equals("poljoprivrednik")) {
            Poljoprivrednik pp = dohvatiPoljoprivrednikaPrekoKorisnickogImena(k.korisnickoIme);
            if(pp!=null) obrisiPoljoprivrednika(pp);
        }
        if(k.getTip().equals("preduzetnik")) {
            Preduzece pred = dohvatiPreduzecePrekoKorisnickogImena(k.korisnickoIme);
           if(pred!=null) obrisiPreduzece(pred);
        }
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.delete(k);
        session.getTransaction().commit();
        session.close();
    }
    
    
    
    
    public static void obrisiPoljoprivrednika(Poljoprivrednik p) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.delete(p);
        session.getTransaction().commit();
        session.close();
    }
    
    public static void obrisiPreduzece(Preduzece p) {
         SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.delete(p);
        session.getTransaction().commit();
        session.close();
    }
    
    public static List<Korisnik> dohvatiKorisnikeA() {
        List<Korisnik> korisnici = new ArrayList<Korisnik>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        korisnici = session.createCriteria(Korisnik.class).add(Restrictions.eq("status", 1)).list();
        session.getTransaction().commit();
        session.close();
        return korisnici;
    }
    
    public static void azuriraj(Korisnik k) {
        if(k.getTip().equals("poljoprivrednik")) {
            azurirajPoljoprivrednika(k);
        }
         if(k.getTip().equals("preduzetnik")) {
            azurirajPreduzece(k);
        }
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(k);
        session.getTransaction().commit();
        session.close();
    }
    
    public static void azurirajPoljoprivrednika(Korisnik k) {
        Poljoprivrednik p = new Poljoprivrednik();
        p = k.getPoljoprivrednik();
         SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(p);
        session.getTransaction().commit();
        session.close();
    }

    
     public static void azurirajPreduzece(Korisnik k) {
        Preduzece p = new Preduzece();
        p = k.getPreduzece();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(p);
        session.getTransaction().commit();
        session.close();
    }
}


