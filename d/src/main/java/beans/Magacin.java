package beans;
// Generated Jun 2, 2020, 10:56:56 PM by Hibernate Tools 4.3.1


import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import util.HibernateUtil;

/**
 * Magacin generated by hbm2java
 */
public class Magacin  implements java.io.Serializable {


     private int idMagacina;
     private Onlineprodavnica onlineprodavnica;
     private Rasadnik rasadnik;
     private int kolicina;
     private Set<Sadnicezasadjene> sadnicezasadjenes = new HashSet<Sadnicezasadjene>(0);
     private int idProizvoda;
     //private Set<Proizvod> proizvods = new HashSet<Proizvod>(0);
     

    public Magacin() {
    }

	
    public Magacin(int idMagacina, Onlineprodavnica onlineprodavnica, Rasadnik rasadnik, int kolicina) {
        this.idMagacina = idMagacina;
        this.onlineprodavnica = onlineprodavnica;
        this.rasadnik = rasadnik;
        this.kolicina = kolicina;
    }
    public Magacin(int idMagacina, Onlineprodavnica onlineprodavnica, Rasadnik rasadnik, int kolicina, Set<Sadnicezasadjene> sadnicezasadjenes) {
       this.idMagacina = idMagacina;
       this.onlineprodavnica = onlineprodavnica;
       this.rasadnik = rasadnik;
       this.kolicina = kolicina;
       this.sadnicezasadjenes = sadnicezasadjenes;
    }
   
    public int getIdMagacina() {
        return this.idMagacina;
    }
    
    public void setIdMagacina(int idMagacina) {
        this.idMagacina = idMagacina;
    }
    public Onlineprodavnica getOnlineprodavnica() {
        return this.onlineprodavnica;
    }
    
    public void setOnlineprodavnica(Onlineprodavnica onlineprodavnica) {
        this.onlineprodavnica = onlineprodavnica;
    }
    public Rasadnik getRasadnik() {
        return this.rasadnik;
    }
    
    public void setRasadnik(Rasadnik rasadnik) {
        this.rasadnik = rasadnik;
    }
    public int getKolicina() {
        return this.kolicina;
    }
    
    public void setKolicina(int kolicina) {
        this.kolicina = kolicina;
    }
    public Set<Sadnicezasadjene> getSadnicezasadjenes() {
        return this.sadnicezasadjenes;
    }
    
    public void setSadnicezasadjenes(Set<Sadnicezasadjene> sadnicezasadjenes) {
        this.sadnicezasadjenes = sadnicezasadjenes;
    }


    

    public static List<Onlineprodavnica> dohvatiPreparate(int idRasadnika) {
        List<Onlineprodavnica> pr = new ArrayList<Onlineprodavnica>();
        List<Integer> magaciniId = dohvatiProdavnice(idRasadnika);
        for(int i = 0; i < magaciniId.size(); i++) {
            Onlineprodavnica op = Onlineprodavnica.dohvatiProdavnicuPreparati(magaciniId.get(i));
            if(op!=null) {
                pr.add(op);
            }
        }
        return pr;
    }
 
    public static List<Integer> dohvatiProdavnice(int idRasadnika) {
     List<Magacin> magacini = new ArrayList<Magacin>();
     List<Integer> idjevi = new ArrayList<Integer>();
     SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        magacini = session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", idRasadnika)).list();
        session.getTransaction().commit();
        session.close();
        for(int i = 0; i < magacini.size(); i++) {
            idjevi.add(magacini.get(i).onlineprodavnica.getIdProdavnice());
        }
       return idjevi;
    }
    
     public static List<Magacin> dohvatiMagacine(int idRasadnika) {
        List<Magacin> magacini = new ArrayList<Magacin>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        magacini = session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", idRasadnika)).list();
        session.getTransaction().commit();
        session.close();
       return magacini;
    }
    
    
    public static Magacin dohvatiMagacin(int idRasadnika, int idProdavnice) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Magacin magacin = (Magacin) session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", idRasadnika)).add(Restrictions.eq("onlineprodavnica.idProdavnice", idProdavnice)).uniqueResult();
        session.getTransaction().commit();
        session.close();
        return magacin;
    }

    public int getIdProizvoda() {
        return idProizvoda;
    }

    public void setIdProizvoda(int idProizvoda) {
        this.idProizvoda = idProizvoda;
    }
    
    
    public static List<Onlineprodavnica> dohvatiSadniceZaSadnju(int idRasadnika) {
        List<Onlineprodavnica> prodavnice = new ArrayList<Onlineprodavnica>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        List<Magacin> magacin = session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", idRasadnika)).list();
        session.getTransaction().commit();
        session.close();
      
        for(int j = 0; j < magacin.size(); j++) {
            Onlineprodavnica op = Onlineprodavnica.dohvatiProdavnicuSadnice(magacin.get(j).getOnlineprodavnica().getIdProdavnice());
            if(op!=null) {
                prodavnice.add(op);
            }
        }
      
        return prodavnice;
    }

    public static int dohvatiKolicinu(Rasadnik rasadnik, Magacin m, Onlineprodavnica op) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Magacin magacin = (Magacin) session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", rasadnik.getIdRasadnika())).add(Restrictions.eq("onlineprodavnica.idProdavnice", op.getIdProdavnice())).add(Restrictions.eq("idMagacina", m.getIdMagacina())).uniqueResult();
        session.getTransaction().commit();
        session.close();
        return magacin.getKolicina();
    }
    
    public static void ubaciProizvod(Narudzbine n) {
        Onlineprodavnica op = Onlineprodavnica.dohvatiProdavnicu(n.getPreduzece(), n.getTipProizvoda(), n.getNazivProizvoda());
        Rasadnik ras = n.getRasadnik();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        Magacin magacin = (Magacin) session.createCriteria(Magacin.class).add(Restrictions.eq("rasadnik.idRasadnika", ras.getIdRasadnika())).add(Restrictions.eq("onlineprodavnica.idProdavnice", op.getIdProdavnice())).uniqueResult();
        session.getTransaction().commit();
        session.close();
        if(magacin==null) {
            Magacin m = new Magacin();
            m.setIdMagacina(Magacin.dohvatiId());
            m.setKolicina(n.getBrojNarucenih());
            m.setOnlineprodavnica(op);
            m.setRasadnik(n.getRasadnik());
            Magacin.dodajUMagacin(m);
           
        }else {
            magacin.setKolicina(magacin.getKolicina()+n.getBrojNarucenih());
            Magacin.azurirajMagacin(magacin);
        }
    }
    
    public static void dodajUMagacin(Magacin m) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.save(m);
        session.getTransaction().commit();
        session.close();
    }
    
    public static void azurirajMagacin(Magacin m) {
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        session.update(m);
        session.getTransaction().commit();
        session.close();
    }
    
    
    public static int dohvatiId() {
        List<Magacin> magacini = new ArrayList<Magacin>();
        SessionFactory sf = HibernateUtil.getSessionFactory();
        Session session = sf.openSession();
        session.beginTransaction();
        magacini = session.createCriteria(Magacin.class).list();
        session.getTransaction().commit();
        session.close();
       int k = 0;
        for(int i = 0; i < magacini.size(); i++) {
            k=magacini.get(i).idMagacina;
        }
        ++k;
        return k;
    }
}


